#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform mediump sampler2D uImage;
layout(set = 0, binding = 1) writeonly uniform mediump image2D uOutput;

layout(constant_id = 0) const bool ENCODE_SRGB = false;

#include "../post/lanczos2.h"
#include "../inc/srgb.h"

layout(push_constant) uniform Registers
{
    uvec2 resolution;
    vec2 inv_resolution;
    vec2 input_resolution;
    vec2 inv_input_resolution;
    float dither_strength;
} registers;

#define D(x) ((x) - 0.5)
const mediump float dither[] = float[](
    D(0.0625), D(0.5625), D(0.1875), D(0.6875),
    D(0.8125), D(0.3125), D(0.9375), D(0.4375),
    D(0.25), D(0.75), D(0.125), D(0.625),
    D(1.00), D(0.5), D(0.875), D(0.375));

void main()
{
    uvec2 coord = gl_GlobalInvocationID.xy;
    if (all(lessThan(coord, registers.resolution)))
    {
        vec2 uv = (vec2(coord) + 0.5) * registers.inv_resolution;
        mediump vec3 rgb = lanczos2(uImage, uv * registers.input_resolution, registers.inv_input_resolution);

        if (ENCODE_SRGB)
            rgb = encode_srgb(rgb);

        rgb += dither[(coord.y & 3u) * 4 + (coord.x & 3u)] * registers.dither_strength;
        imageStore(uOutput, ivec2(coord), vec4(rgb, 1.0));
    }
}
